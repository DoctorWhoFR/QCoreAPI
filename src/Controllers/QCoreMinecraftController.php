<?php
/*
 * QCOREApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace QCOREApiLib\Controllers;

use QCOREApiLib\APIException;
use QCOREApiLib\APIHelper;
use QCOREApiLib\Configuration;
use QCOREApiLib\Models;
use QCOREApiLib\Exceptions;
use QCOREApiLib\Http\HttpRequest;
use QCOREApiLib\Http\HttpResponse;
use QCOREApiLib\Http\HttpMethod;
use QCOREApiLib\Http\HttpContext;
use QCOREApiLib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class QCoreMinecraftController extends BaseController
{
    /**
     * @var QCoreMinecraftController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return QCoreMinecraftController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Launch a minecraft server
     *
     * @param string  $authorization TODO: type description here
     * @param integer $serverId      TODO: type description here
     * @return void response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createMcStart(
        $authorization,
        $serverId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/qcore/mc/start';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Authorization'   => $authorization
        );

        //prepare parameters
        $_parameters = array (
            'server_id'     => $serverId
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);
    }

    /**
     * Stop a minecraft server
     *
     * @param string  $authorization TODO: type description here
     * @param integer $serverId      TODO: type description here
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createMcStop(
        $authorization,
        $serverId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/qcore/mc/start';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'Authorization'   => $authorization
        );

        //prepare parameters
        $_parameters = array (
            'server_id'     => $serverId
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'QCOREApiLib\\Models\\McStop');
    }

    /**
     * get details about a minecraft
     *
     * @param string  $authorization TODO: type description here
     * @param integer $serverId      TODO: type description here
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createMcDetails(
        $authorization,
        $serverId
    ) {

        //prepare query string for API call
        $_queryBuilder = '/qcore/mc/start';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl(Configuration::getBaseUri() . $_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => BaseController::USER_AGENT,
            'Accept'        => 'application/json',
            'Authorization'   => $authorization
        );

        //prepare parameters
        $_parameters = array (
            'server_id'     => $serverId
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Form($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'QCOREApiLib\\Models\\McStop');
    }
}
