<?php
/*
 * QCOREApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace QCOREApiLib\Tests;

use QCOREApiLib\APIException;
use QCOREApiLib\Exceptions;
use QCOREApiLib\APIHelper;
use QCOREApiLib\Models;

class ServersControllerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \QCOREApiLib\Controllers\ServersController Controller instance
     */
    protected static $controller;

    /**
     * @var HttpCallBackCatcher Callback
     */
    protected $httpResponse;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass()
    {
        $client = new \QCOREApiLib\QCOREApiClient();
        self::$controller = $client->getServers();
    }

    /**
     * Setup test
     */
    protected function setUp()
    {
        $this->httpResponse = new HttpCallBackCatcher();
    }

    /**
     * Retournes une liste qui contient les serveurs actuellements achetÃ©s par l'utilisateur.
     */
    public function testListesLesServersDeLUtilisateurConnectS()
    {
        // Parameters for the API call
        $authorization = '7ljr0lDUETeCWbPDJLOuFUkPmr42';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->listesLesServersDeLUtilisateurConnectS($authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Security-Policy'] = null ;
        $headers['X-DNS-Prefetch-Control'] = null ;
        $headers['Expect-CT'] = null ;
        $headers['X-Frame-Options'] = null ;
        $headers['Strict-Transport-Security'] = null ;
        $headers['X-Download-Options'] = null ;
        $headers['X-Content-Type-Options'] = null ;
        $headers['X-Permitted-Cross-Domain-Policies'] = null ;
        $headers['Referrer-Policy'] = null ;
        $headers['X-XSS-Protection'] = null ;
        $headers['Access-Control-Allow-Origin'] = null ;
        $headers['Content-Type'] = null ;
        $headers['Content-Length'] = null ;
        $headers['ETag'] = null ;
        $headers['Date'] = null ;
        $headers['Connection'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isArrayOfStringifiedJsonObjectsProperSubsetOf(
                "[\r\n  {\r\n    \"id\": 21945158,\r\n    \"label\": \"gmodfinald\",\r\n    \"group\": \"\",\r\n    " .
                "\"status\": \"running\",\r\n    \"created\": \"2020-09-06T15:34:19\",\r\n    \"updated\": \"2020-09-" .
                "06T15:34:19\",\r\n    \"type\": \"g6-standard-2\",\r\n    \"ipv4\": [\r\n      \"45.79.141.26\"\r\n " .
                "   ],\r\n    \"ipv6\": \"2600:3c03::f03c:92ff:fe47:3322/64\",\r\n    \"image\": \"linode/ubuntu20.04" .
                "\",\r\n    \"region\": \"us-east\",\r\n    \"specs\": {\r\n      \"disk\": 81920,\r\n      \"memory" .
                "\": 4096,\r\n      \"vcpus\": 2,\r\n      \"gpus\": 0,\r\n      \"transfer\": 4000\r\n    },\r\n    " .
                "\"alerts\": {\r\n      \"cpu\": 180,\r\n      \"network_in\": 10,\r\n      \"network_out\": 10,\r\n " .
                "     \"transfer_quota\": 80,\r\n      \"io\": 10000\r\n    },\r\n    \"backups\": {\r\n      \"enabl" .
                "ed\": false,\r\n      \"schedule\": {\r\n        \"day\": null,\r\n        \"window\": null\r\n     " .
                " },\r\n      \"last_successful\": null\r\n    },\r\n    \"hypervisor\": \"kvm\",\r\n    \"watchdog_e" .
                "nabled\": true,\r\n    \"tags\": []\r\n  },\r\n  {\r\n    \"id\": 21945071,\r\n    \"label\": \"test" .
                "mountff\",\r\n    \"group\": \"\",\r\n    \"status\": \"running\",\r\n    \"created\": \"2020-09-06T" .
                "15:23:33\",\r\n    \"updated\": \"2020-09-06T15:23:33\",\r\n    \"type\": \"g6-standard-2\",\r\n    " .
                "\"ipv4\": [\r\n      \"45.33.80.204\"\r\n    ],\r\n    \"ipv6\": \"2600:3c03::f03c:92ff:fe47:2f65/64" .
                "\",\r\n    \"image\": \"linode/ubuntu20.04\",\r\n    \"region\": \"us-east\",\r\n    \"specs\": {\r" .
                "\n      \"disk\": 81920,\r\n      \"memory\": 4096,\r\n      \"vcpus\": 2,\r\n      \"gpus\": 0,\r\n" .
                "      \"transfer\": 4000\r\n    },\r\n    \"alerts\": {\r\n      \"cpu\": 180,\r\n      \"network_in" .
                "\": 10,\r\n      \"network_out\": 10,\r\n      \"transfer_quota\": 80,\r\n      \"io\": 10000\r\n   " .
                " },\r\n    \"backups\": {\r\n      \"enabled\": false,\r\n      \"schedule\": {\r\n        \"day\": " .
                "null,\r\n        \"window\": null\r\n      },\r\n      \"last_successful\": null\r\n    },\r\n    \"" .
                "hypervisor\": \"kvm\",\r\n    \"watchdog_enabled\": true,\r\n    \"tags\": []\r\n  },\r\n  {\r\n    " .
                "\"id\": 21945504,\r\n    \"label\": \"demomcserver\",\r\n    \"group\": \"\",\r\n    \"status\": \"r" .
                "unning\",\r\n    \"created\": \"2020-09-06T16:26:07\",\r\n    \"updated\": \"2020-09-06T16:26:07\"," .
                "\r\n    \"type\": \"g6-standard-2\",\r\n    \"ipv4\": [\r\n      \"172.104.8.47\"\r\n    ],\r\n    " .
                "\"ipv6\": \"2600:3c03::f03c:92ff:fe47:e019/64\",\r\n    \"image\": \"linode/ubuntu20.04\",\r\n    \"" .
                "region\": \"us-east\",\r\n    \"specs\": {\r\n      \"disk\": 81920,\r\n      \"memory\": 4096,\r\n " .
                "     \"vcpus\": 2,\r\n      \"gpus\": 0,\r\n      \"transfer\": 4000\r\n    },\r\n    \"alerts\": {" .
                "\r\n      \"cpu\": 180,\r\n      \"network_in\": 10,\r\n      \"network_out\": 10,\r\n      \"transf" .
                "er_quota\": 80,\r\n      \"io\": 10000\r\n    },\r\n    \"backups\": {\r\n      \"enabled\": false," .
                "\r\n      \"schedule\": {\r\n        \"day\": null,\r\n        \"window\": null\r\n      },\r\n     " .
                " \"last_successful\": null\r\n    },\r\n    \"hypervisor\": \"kvm\",\r\n    \"watchdog_enabled\": tr" .
                "ue,\r\n    \"tags\": []\r\n  },\r\n  {\r\n    \"id\": 21945163,\r\n    \"label\": \"gmodfinaldff\"," .
                "\r\n    \"group\": \"\",\r\n    \"status\": \"running\",\r\n    \"created\": \"2020-09-06T15:34:50\"" .
                ",\r\n    \"updated\": \"2020-09-06T15:34:50\",\r\n    \"type\": \"g6-standard-2\",\r\n    \"ipv4\": " .
                "[\r\n      \"45.79.162.84\"\r\n    ],\r\n    \"ipv6\": \"2600:3c03::f03c:92ff:fe47:33e4/64\",\r\n   " .
                " \"image\": \"linode/ubuntu20.04\",\r\n    \"region\": \"us-east\",\r\n    \"specs\": {\r\n      \"d" .
                "isk\": 81920,\r\n      \"memory\": 4096,\r\n      \"vcpus\": 2,\r\n      \"gpus\": 0,\r\n      \"tra" .
                "nsfer\": 4000\r\n    },\r\n    \"alerts\": {\r\n      \"cpu\": 180,\r\n      \"network_in\": 10,\r\n" .
                "      \"network_out\": 10,\r\n      \"transfer_quota\": 80,\r\n      \"io\": 10000\r\n    },\r\n    " .
                "\"backups\": {\r\n      \"enabled\": false,\r\n      \"schedule\": {\r\n        \"day\": null,\r\n  " .
                "      \"window\": null\r\n      },\r\n      \"last_successful\": null\r\n    },\r\n    \"hypervisor" .
                "\": \"kvm\",\r\n    \"watchdog_enabled\": true,\r\n    \"tags\": []\r\n  },\r\n  {\r\n    \"id\": 21" .
                "945288,\r\n    \"label\": \"demolorenzo\",\r\n    \"group\": \"\",\r\n    \"status\": \"running\",\r" .
                "\n    \"created\": \"2020-09-06T15:56:43\",\r\n    \"updated\": \"2020-09-06T15:56:43\",\r\n    \"ty" .
                "pe\": \"g6-standard-2\",\r\n    \"ipv4\": [\r\n      \"45.79.183.84\"\r\n    ],\r\n    \"ipv6\": \"2" .
                "600:3c03::f03c:92ff:fe47:3319/64\",\r\n    \"image\": \"linode/ubuntu20.04\",\r\n    \"region\": \"u" .
                "s-east\",\r\n    \"specs\": {\r\n      \"disk\": 81920,\r\n      \"memory\": 4096,\r\n      \"vcpus" .
                "\": 2,\r\n      \"gpus\": 0,\r\n      \"transfer\": 4000\r\n    },\r\n    \"alerts\": {\r\n      \"c" .
                "pu\": 180,\r\n      \"network_in\": 10,\r\n      \"network_out\": 10,\r\n      \"transfer_quota\": 8" .
                "0,\r\n      \"io\": 10000\r\n    },\r\n    \"backups\": {\r\n      \"enabled\": false,\r\n      \"sc" .
                "hedule\": {\r\n        \"day\": null,\r\n        \"window\": null\r\n      },\r\n      \"last_succes" .
                "sful\": null\r\n    },\r\n    \"hypervisor\": \"kvm\",\r\n    \"watchdog_enabled\": true,\r\n    \"t" .
                "ags\": []\r\n  },\r\n  {\r\n    \"id\": 21944997,\r\n    \"label\": \"test\",\r\n    \"group\": \"\"" .
                ",\r\n    \"status\": \"running\",\r\n    \"created\": \"2020-09-06T15:06:32\",\r\n    \"updated\": " .
                "\"2020-09-06T15:06:32\",\r\n    \"type\": \"g6-standard-2\",\r\n    \"ipv4\": [\r\n      \"45.33.77." .
                "88\"\r\n    ],\r\n    \"ipv6\": \"2600:3c03::f03c:92ff:fe47:2f6a/64\",\r\n    \"image\": \"linode/ub" .
                "untu20.04\",\r\n    \"region\": \"us-east\",\r\n    \"specs\": {\r\n      \"disk\": 81920,\r\n      " .
                "\"memory\": 4096,\r\n      \"vcpus\": 2,\r\n      \"gpus\": 0,\r\n      \"transfer\": 4000\r\n    }," .
                "\r\n    \"alerts\": {\r\n      \"cpu\": 180,\r\n      \"network_in\": 10,\r\n      \"network_out\": " .
                "10,\r\n      \"transfer_quota\": 80,\r\n      \"io\": 10000\r\n    },\r\n    \"backups\": {\r\n     " .
                " \"enabled\": false,\r\n      \"schedule\": {\r\n        \"day\": null,\r\n        \"window\": null" .
                "\r\n      },\r\n      \"last_successful\": null\r\n    },\r\n    \"hypervisor\": \"kvm\",\r\n    \"w" .
                "atchdog_enabled\": true,\r\n    \"tags\": []\r\n  }\r\n]",
                $this->httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * Cette commande allume un serveur, retourne un message d'erreur si la machine est dÃ©jÃ  lancÃ© ou affiche simplement 200 si le lancement et ok.
     */
    public function testAllumeUnServeur()
    {
        // Parameters for the API call
        $id = 21945158;
        $authorization = '7ljr0lDUETeCWbPDJLOuFUkPmr42';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getAllumeUnServeur($id, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Security-Policy'] = null ;
        $headers['X-DNS-Prefetch-Control'] = null ;
        $headers['Expect-CT'] = null ;
        $headers['X-Frame-Options'] = null ;
        $headers['Strict-Transport-Security'] = null ;
        $headers['X-Download-Options'] = null ;
        $headers['X-Content-Type-Options'] = null ;
        $headers['X-Permitted-Cross-Domain-Policies'] = null ;
        $headers['Referrer-Policy'] = null ;
        $headers['X-XSS-Protection'] = null ;
        $headers['Access-Control-Allow-Origin'] = null ;
        $headers['Content-Type'] = null ;
        $headers['Content-Length'] = null ;
        $headers['ETag'] = null ;
        $headers['Date'] = null ;
        $headers['Connection'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                '{\r\n  "errors": [\r\n    {\r\n      "reason": "Linode 21945158 already booted."\r\n    }\r\n  ]\r\n}',
                $this->httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }

    /**
     * show info for an linode server
     */
    public function testLinodeServersShow()
    {
        // Parameters for the API call
        $id = 21945288;
        $authorization = '7ljr0lDUETeCWbPDJLOuFUkPmr42';

        // Set callback and perform API call
        $result = null;
        self::$controller->setHttpCallBack($this->httpResponse);
        try {
            $result = self::$controller->getLinodeServersShow($id, $authorization);
        } catch (APIException $e) {
        }

        // Test response code
        $this->assertEquals(
            200,
            $this->httpResponse->getResponse()->getStatusCode(),
            "Status is not 200"
        );

        // Test headers
        $headers = [];
        $headers['Content-Security-Policy'] = null ;
        $headers['X-DNS-Prefetch-Control'] = null ;
        $headers['Expect-CT'] = null ;
        $headers['X-Frame-Options'] = null ;
        $headers['Strict-Transport-Security'] = null ;
        $headers['X-Download-Options'] = null ;
        $headers['X-Content-Type-Options'] = null ;
        $headers['X-Permitted-Cross-Domain-Policies'] = null ;
        $headers['Referrer-Policy'] = null ;
        $headers['X-XSS-Protection'] = null ;
        $headers['Access-Control-Allow-Origin'] = null ;
        $headers['Content-Type'] = null ;
        $headers['Content-Length'] = null ;
        $headers['ETag'] = null ;
        $headers['Date'] = null ;
        $headers['Connection'] = null ;
        
        $this->assertTrue(
            TestHelper::areHeadersProperSubsetOf($headers, $this->httpResponse->getResponse()->getHeaders(), true),
            "Headers do not match"
        );

        // Test whether the captured response is as we expected
        $this->assertNotNull($result, "Result does not exist");

        $this->assertTrue(
            TestHelper::isJsonObjectProperSubsetOf(
                "{\r\n  \"status\": 200,\r\n  \"result\": {\r\n    \"id\": 21945288,\r\n    \"label\": \"demolorenzo" .
                "\",\r\n    \"group\": \"\",\r\n    \"status\": \"offline\",\r\n    \"created\": \"2020-09-06T15:56:4" .
                "3\",\r\n    \"updated\": \"2020-09-06T15:56:43\",\r\n    \"type\": \"g6-standard-2\",\r\n    \"ipv4" .
                "\": [\r\n      \"45.79.183.84\"\r\n    ],\r\n    \"ipv6\": \"2600:3c03::f03c:92ff:fe47:3319/64\",\r" .
                "\n    \"image\": \"linode/ubuntu20.04\",\r\n    \"region\": \"us-east\",\r\n    \"specs\": {\r\n    " .
                "  \"disk\": 81920,\r\n      \"memory\": 4096,\r\n      \"vcpus\": 2,\r\n      \"gpus\": 0,\r\n      " .
                "\"transfer\": 4000\r\n    },\r\n    \"alerts\": {\r\n      \"cpu\": 180,\r\n      \"network_in\": 10" .
                ",\r\n      \"network_out\": 10,\r\n      \"transfer_quota\": 80,\r\n      \"io\": 10000\r\n    },\r" .
                "\n    \"backups\": {\r\n      \"enabled\": false,\r\n      \"schedule\": {\r\n        \"day\": null," .
                "\r\n        \"window\": null\r\n      },\r\n      \"last_successful\": null\r\n    },\r\n    \"hyper" .
                "visor\": \"kvm\",\r\n    \"watchdog_enabled\": true,\r\n    \"tags\": []\r\n  }\r\n}",
                $this->httpResponse->getResponse()->getRawBody(),
                false,
                true,
                false
            ),
            "Response body does not match in keys"
        );
    }
}
