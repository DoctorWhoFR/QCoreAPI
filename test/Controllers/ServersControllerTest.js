/**
 * QCOREApiLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.ServersController;
const ListesDeServeur = testerlib.ListesDeServeur;
const SiLeServeurEstDJAllum = testerlib.SiLeServeurEstDJAllum;
const LinodeServersShow = testerlib.LinodeServersShow;
const BaseStatusApi = testerlib.BaseStatusApi;

describe("ServersController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Retournes une liste qui contient les serveurs actuellements achetés par l'utilisateur.
     */
    it("should testListesLesServersDeLUtilisateurConnectS response", function testListesLesServersDeLUtilisateurConnectSTest(done) {
        // parameters for the API call
        let authorization = '7ljr0lDUETeCWbPDJLOuFUkPmr42';

        controller.listesLesServersDeLUtilisateurConnectS(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Security-Policy'] = null;
            headers['X-DNS-Prefetch-Control'] = null;
            headers['Expect-CT'] = null;
            headers['X-Frame-Options'] = null;
            headers['Strict-Transport-Security'] = null;
            headers['X-Download-Options'] = null;
            headers['X-Content-Type-Options'] = null;
            headers['X-Permitted-Cross-Domain-Policies'] = null;
            headers['Referrer-Policy'] = null;
            headers['X-XSS-Protection'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isArrayOfJsonObjectsProperSubsetOf(context.response.body, [
  {
    "id": 21945158,
    "label": "gmodfinald",
    "group": "",
    "status": "running",
    "created": "2020-09-06T15: 34: 19",
    "updated": "2020-09-06T15: 34: 19",
    "type": "g6-standard-2",
    "ipv4": [
      "45.79.141.26"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: 3322/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  },
  {
    "id": 21945071,
    "label": "testmountff",
    "group": "",
    "status": "running",
    "created": "2020-09-06T15: 23: 33",
    "updated": "2020-09-06T15: 23: 33",
    "type": "g6-standard-2",
    "ipv4": [
      "45.33.80.204"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: 2f65/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  },
  {
    "id": 21945504,
    "label": "demomcserver",
    "group": "",
    "status": "running",
    "created": "2020-09-06T16: 26: 07",
    "updated": "2020-09-06T16: 26: 07",
    "type": "g6-standard-2",
    "ipv4": [
      "172.104.8.47"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: e019/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  },
  {
    "id": 21945163,
    "label": "gmodfinaldff",
    "group": "",
    "status": "running",
    "created": "2020-09-06T15: 34: 50",
    "updated": "2020-09-06T15: 34: 50",
    "type": "g6-standard-2",
    "ipv4": [
      "45.79.162.84"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: 33e4/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  },
  {
    "id": 21945288,
    "label": "demolorenzo",
    "group": "",
    "status": "running",
    "created": "2020-09-06T15: 56: 43",
    "updated": "2020-09-06T15: 56: 43",
    "type": "g6-standard-2",
    "ipv4": [
      "45.79.183.84"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: 3319/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  },
  {
    "id": 21944997,
    "label": "test",
    "group": "",
    "status": "running",
    "created": "2020-09-06T15: 06: 32",
    "updated": "2020-09-06T15: 06: 32",
    "type": "g6-standard-2",
    "ipv4": [
      "45.33.77.88"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: 2f6a/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  }
], false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * Cette commande allume un serveur, retourne un message d'erreur si la machine est déjà lancé ou affiche simplement 200 si le lancement et ok.
     */
    it("should testAllumeUnServeur response", function testAllumeUnServeurTest(done) {
        // parameters for the API call
        let id = 21945158;
        let authorization = '7ljr0lDUETeCWbPDJLOuFUkPmr42';

        controller.getAllumeUnServeur(id, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Security-Policy'] = null;
            headers['X-DNS-Prefetch-Control'] = null;
            headers['Expect-CT'] = null;
            headers['X-Frame-Options'] = null;
            headers['Strict-Transport-Security'] = null;
            headers['X-Download-Options'] = null;
            headers['X-Content-Type-Options'] = null;
            headers['X-Permitted-Cross-Domain-Policies'] = null;
            headers['Referrer-Policy'] = null;
            headers['X-XSS-Protection'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "errors": [
    {
      "reason": "Linode 21945158 already booted."
    }
  ]
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * show info for an linode server
     */
    it("should testLinodeServersShow response", function testLinodeServersShowTest(done) {
        // parameters for the API call
        let id = 21945288;
        let authorization = '7ljr0lDUETeCWbPDJLOuFUkPmr42';

        controller.getLinodeServersShow(id, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Security-Policy'] = null;
            headers['X-DNS-Prefetch-Control'] = null;
            headers['Expect-CT'] = null;
            headers['X-Frame-Options'] = null;
            headers['Strict-Transport-Security'] = null;
            headers['X-Download-Options'] = null;
            headers['X-Content-Type-Options'] = null;
            headers['X-Permitted-Cross-Domain-Policies'] = null;
            headers['Referrer-Policy'] = null;
            headers['X-XSS-Protection'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['ETag'] = null;
            headers['Date'] = null;
            headers['Connection'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "status": 200,
  "result": {
    "id": 21945288,
    "label": "demolorenzo",
    "group": "",
    "status": "offline",
    "created": "2020-09-06T15: 56: 43",
    "updated": "2020-09-06T15: 56: 43",
    "type": "g6-standard-2",
    "ipv4": [
      "45.79.183.84"
    ],
    "ipv6": "2600: 3c03: : f03c: 92ff: fe47: 3319/64",
    "image": "linode/ubuntu20.04",
    "region": "us-east",
    "specs": {
      "disk": 81920,
      "memory": 4096,
      "vcpus": 2,
      "gpus": 0,
      "transfer": 4000
    },
    "alerts": {
      "cpu": 180,
      "network_in": 10,
      "network_out": 10,
      "transfer_quota": 80,
      "io": 10000
    },
    "backups": {
      "enabled": false,
      "schedule": {
        "day": null,
        "window": null
      },
      "last_successful": null
    },
    "hypervisor": "kvm",
    "watchdog_enabled": true,
    "tags": []
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

});
